# Copyright 2017 Alan Sparrow
#
# This file is part of YAIXM
#
# YAIXM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# YAIXM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YAIXM.  If not, see <http://www.gnu.org/licenses/>.

id: http://freeflight.org.uk/yaixm-schema

$schema: http://json-schema.org/draft-04/schema#

definitions:
  #--------------------------------------------------------------------
  # Type definition/enumerations, etc.

  # ICAO airspace classes
  class: &class
    type: string
    enum: [A, B, C, D, E, F, G]

  # Military/civil operations
  controltype: &controltype
    type: string
    enum:
      - CIVIL
      - MILITARY
      - JOINT

  # Volume ID, used for volumes affected by LoAs
  id: &id
    type: string
    pattern: ^[a-z][\-/0-9a-z]*$

  # Latitude/longitude tuple
  latlon: &latlon
    type: string
    pattern: ^[0-8][0-9][0-5][0-9][0-5][0-9][NS]
              ([0][0-9]{2}|[1][0-7][0-9])[0-5][0-9][0-5][0-9][EW]$

  # Local type, applicable when type is OTHER or D_OTHER
  localtype: &localtype
    type: string
    enum:
      - DZ          # Parachute drop zone
      - GLIDER      # Gliding operations
      - GVS         # Gas venting station
      - HIRTA       # High intensity radio transmission area
      - ILS         # ILS feather
      - LASER       # Laser site
      - MATZ        # Military ATZ
      - NOATZ       # Non-ATZ airfield
      - RAT         # Temporary restricted area
      - RMZ         # Radio mandatory zone
      - UL          # Ultra-light strip
      - TMZ         # Transponder mandatory zone

  # This is more restrictive than the AIXM Character3Type
  name: &name
    type: string
    pattern: ^[A-Z][A-Z0-9]+(( |\-|/|\')[\(\)0-9A-Z]+)*$

  # Array of notes
  notes: &notes
    type: array
    items:
      type: string
    minItems: 1

  # Rules applicable to an airspace volume
  rules: &rules
    type: array
    items:
      type: string
      enum:
        - INTENSE   # Intense activity
        - LOA       # Letter of agreement
        - NOSSR     # Non-SSR area
        - NOTAM     # NOTAM activated
        - RAZ       # Radio advisory zone
        - RMZ       # Radio mandatory zone
        - SI        # Statutary Instrument
        - TRA       # Temporary reserved area
        - TMZ       # Transponder mandatory zone
    minItems: 1

  # Indicates order of aggregation
  seqno: &seqno
    type: integer
    minimum: 1

  # Airspace types from AIXM
  type: &type
    type: string
    enum:
      - ATZ         # Air Traffic Zone
      - AWY         # Airway
      - CTA         # Control area. Upwards from a specified limit
      - CTR         # Control zone. Upwards from the surface
      - D           # Danger area
      - D_OTHER     # Dangerous activity, but not a Danger area
      - OTHER       # As specified by localtype
      - P           # Prohibited area
      - R           # Restricted area
      - TMA         # Terminal control area

  #--------------------------------------------------------------------
  # Volume boundary definitions

  # Circle or arc radius
  radius: &radius
    type: string
    pattern: ^[0-9]*?.?[0-9]+[ ](nm|km)$

  # Circular boundary
  circle: &circle
    type: object
    properties:
      centre: *latlon
      radius: *radius
    required: [centre, radius]
    additionalProperties: False

  # Arc boundary segment
  arc: &arc
    type: object
    properties:
      centre: *latlon
      dir:
        type: string
        enum: [cw, ccw]
      radius: *radius
      to: *latlon
    required: [centre, dir, radius, to]
    additionalProperties: False

  # Line boundary segment
  line: &line
    type: array
    items: *latlon
    minItems: 1

  # Boundary segments selection
  circle_segment: &circle_segment
    type: object
    properties:
      circle: *circle
    additionalProperties: False

  line_segment: &line_segment
    type: object
    properties:
      line: *line
    additionalProperties: False

  arc_segment: &arc_segment
    type: object
    properties:
      arc: *arc
    additionalProperties: False

  #--------------------------------------------------------------------
  # Airspace volume with upper limit, lower limit and boundary

  volume: &volume
    type: object
    properties:
      # Boundary is either a circle, or a line with additional arcs and lines
      boundary:
        oneOf:
        - type: array
          items: *circle_segment
          minItems: 1
          maxItems: 1

        - type: array
          items:
          - *line_segment
          additionalItems:
            oneOf:
            - *line_segment
            - *arc_segment
          minItems: 1

      # Overrides class in parent airspace
      class: *class

      # Surface elevation
      elevation:
        type: string
        pattern: ^[0-9]{1,5}[ ](m|ft)$

      # Identifies volume (for LoA replacement and frequency assignment)
      id: *id

      lower:
        type: string
        # Surface, or referenced to standard pressure or MSL
        pattern: ^(SFC|FL[0-9]{2,3}|[0-9]{1,5}[ ](m|ft))$

      # Overrides name in parent airspace. Allows non-standard airspace
      # volume names, e.g. P600-X
      name: *name

      notes: *notes

      # Aggregated with rules from parent airspace
      rules: *rules

      # Indicates order of aggregation
      seqno: *seqno

      subseq:
        type: string
        pattern: ^[A-Z]$

      upper:
        type: string
        # Referenced to either standard pressure or MSL
        pattern: ^(FL[0-9]{2,3}|[0-9]{1,5}[ ](m|ft))$

    required: [lower, upper, boundary]
    additionalProperties: False

  #--------------------------------------------------------------------
  # Airspace feature, consisting of one or more airspace volumes

  feature: &feature
    type: object
    properties:
      # Overriden by class in child volume
      class: *class

      # Identifies feature (for frequency assignment)
      id: *id

      # Optional, assumed JOINT if not specified
      controltype: *controltype

      # Array of airspace volumes
      geometry: &geometry
        type: array
        items: *volume
        minItems: 1

      # Only applicable if feature type is OTHER or D_OTHER
      localtype: *localtype

      # Airspace name
      name: *name

      notes: *notes

      # Aggregated with rules in child volumes
      rules: *rules

      type: *type

    required: [name, geometry, type]
    additionalProperties: False

  #--------------------------------------------------------------------
  # Letter of agreement (LoA)

  # Volume replacements, substitures existing volume with none or more
  # new volmes
  volume_replacement: &volume_replacement
    type: object
    properties:
      id: *id
      geometry:
        <<: *geometry
        minItems: 0

    required: [id, geometry]
    additionalProperties: False

  # LoA airspace area consists of new LoA airspace feature plus possible
  # modifications to existing features
  loa_area: &loa_area
    type: object
    properties:
      # New airspace features
      add:
        type: array
        items: *feature

      name: *name
      notes: *notes

      # Replacments for existing volumes
      replace:
        type: array
        items: *volume_replacement

    required: [name, add]
    additionalProperties: False

  # Letter of Agreement (LoA)
  loa: &loa
    type: object
    properties:
      # LoA can contain multiple airspace areas
      areas:
        type: array
        items: *loa_area
        minItems: 1

      name: *name
      notes: *notes

      # LoA is added to merged airspace by default
      default:
        type: boolean

    required: [name, areas]
    additionalProperties: False

  #--------------------------------------------------------------------
  # Obstacle

  obstacle: &obstacle
    type: object
    properties:
      elevation:
        type: string
        pattern: ^[0-9]{1,4}[ ](m|ft)$
      # ID from ENR spreadsheet
      id:
        type: string
        pattern: ^UK[0-9A-Z]+$
      name: *name
      position: *latlon
      # Type emumeration from ENR spreadsheet
      type:
        type: string
        enum:
          - BLDG        # Building
          - BRDG        # Bridge
          - CHIM        # Chimney
          - COOL        # Cooling tower
          - CRN         # Crane
          - FLR         # Gas flare
          - MET         # Meteorological mast
          - MINE        # Mining structure
          - MISC        # Miscellaneous
          - MONT        # Monument
          - OBST        # Other
          - OIL         # Oil refinery
          - PLT         # Miscellaneous industrial building
          - POW         # Place of worship
          - PYL         # Pylon
          - RTM         # Radio/TV mast
          - TURB-ON     # Onshore wind turbine
          - WASTE       # Waste pipe

    required: [elevation, id, name, position, type]
    additionalProperties: False

  #--------------------------------------------------------------------
  # Services

  service: &service
    type: object
    properties:
      callsign:
        type: string
        pattern: ^[A-Z][A-Z]+(( )[A-Z]+)*$

      frequency:
        type: number
        minimum: 118
        maximum: 136

      controls:
        type: array
        items: *id
        minItems: 1

    required: [callsign, frequency, controls]

  #--------------------------------------------------------------------
  # Release header

  release: &release
    type: object
    properties:
      # Airspace AIRAC release date
      airac_date:
        type: string
        format: date-time

      # Data release timestamp
      timestamp:
        type: string
        format: date-time

      # Schema version
      schema_version:
        type: integer
        minimum: 1
        maximum: 1

      # Release note
      note:
        type: string

      # Git commit
      commit:
        type: string
        oneOf:
        - pattern: ^unknown$
        - pattern: ^changed$
        - pattern: ^[0-9a-f]{40}$

    required: [airac_date, timestamp, schema_version]
    additionalProperties: False

# Top level schema
type: object
properties:
  release: *release
  airspace:
    type: array
    items: *feature
    minItems: 1
  loa:
    type: array
    items: *loa
    minItems: 1
  rat:
    type: array
    items: *feature
    minItems: 0
  obstacle:
    type: array
    items: *obstacle
    minItems: 1
  service:
    type: array
    items: *service
    minItems: 1

oneOf:
  # Allow individual YAIXM files to pass check
  - allOf:
    - maxProperties: 1
    - oneOf:
        - required: [airspace]
        - required: [loa]
        - required: [rat]
        - required: [obstacle]
        - required: [service]

  # Otherwise must have at least the release header and airspace
  - required: [release, airspace]

additionalProperties: False
